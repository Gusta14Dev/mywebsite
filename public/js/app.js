/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var typeit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! typeit */ \"./node_modules/typeit/dist/index.es.js\");\n__webpack_require__(/*! ./bootstrap */ \"./resources/js/bootstrap.js\");\n\nnew typeit__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"#typing\", {\n  speed: 250,\n  waitUntilVisible: true,\n  loop: true\n}).type('WEB').pause(1000)[\"delete\"](3).type('PHP').pause(1000)[\"delete\"](3).type('LARAVEL').pause(1000)[\"delete\"](7).type('FULLSTACK').pause(1000)[\"delete\"](9).go();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLG1CQUFPLENBQUMsZ0RBQWEsQ0FBQztBQUVNO0FBRTVCLElBQUlDLDhDQUFNLENBQUMsU0FBUyxFQUFFO0VBQ2RDLEtBQUssRUFBRSxHQUFHO0VBQ1ZDLGdCQUFnQixFQUFFLElBQUk7RUFDdEJDLElBQUksRUFBRTtBQUNWLENBQUMsQ0FBQyxDQUNEQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ1hDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFDTCxDQUFDLENBQUMsQ0FBQyxDQUNURCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ1hDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFDTCxDQUFDLENBQUMsQ0FBQyxDQUNURCxJQUFJLENBQUMsU0FBUyxDQUFDLENBQ2ZDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFDTCxDQUFDLENBQUMsQ0FBQyxDQUNURCxJQUFJLENBQUMsV0FBVyxDQUFDLENBQ2pCQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FDVEMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9ib290c3RyYXAnKTtcblxuaW1wb3J0IFR5cGVJdCBmcm9tIFwidHlwZWl0XCI7XG5cbm5ldyBUeXBlSXQoXCIjdHlwaW5nXCIsIHtcbiAgICAgICAgc3BlZWQ6IDI1MCxcbiAgICAgICAgd2FpdFVudGlsVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICB9KVxuICAgIC50eXBlKCdXRUInKVxuICAgIC5wYXVzZSgxMDAwKVxuICAgIC5kZWxldGUoMylcbiAgICAudHlwZSgnUEhQJylcbiAgICAucGF1c2UoMTAwMClcbiAgICAuZGVsZXRlKDMpXG4gICAgLnR5cGUoJ0xBUkFWRUwnKVxuICAgIC5wYXVzZSgxMDAwKVxuICAgIC5kZWxldGUoNylcbiAgICAudHlwZSgnRlVMTFNUQUNLJylcbiAgICAucGF1c2UoMTAwMClcbiAgICAuZGVsZXRlKDkpXG4gICAgLmdvKCk7Il0sIm5hbWVzIjpbInJlcXVpcmUiLCJUeXBlSXQiLCJzcGVlZCIsIndhaXRVbnRpbFZpc2libGUiLCJsb29wIiwidHlwZSIsInBhdXNlIiwiZ28iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/bootstrap.js":
/*!***********************************!*\
  !*** ./resources/js/bootstrap.js ***!
  \***********************************/
/***/ (() => {

eval("// import Alpine from 'alpinejs';\n// window.Alpine = Alpine;\n// Alpine.start();\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo'\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });\n\n// window.toastr = require('toastr');\n\n// toastr.options = {\n//     \"closeButton\": true,\n//     \"debug\": false,\n//     \"newestOnTop\": false,\n//     \"progressBar\": true,\n//     \"positionClass\": \"toast-top-right\",\n//     \"preventDuplicates\": false,\n//     \"onclick\": null,\n//     \"showDuration\": \"300\",\n//     \"hideDuration\": \"1000\",\n//     \"timeOut\": \"5000\",\n//     \"extendedTimeOut\": \"1000\",\n//     \"showEasing\": \"swing\",\n//     \"hideEasing\": \"linear\",\n//     \"showMethod\": \"fadeIn\",\n//     \"hideMethod\": \"fadeOut\"\n// }\n\n// window.livewire.on('toastr', response => {\n//     toastr[response['type']](response['message'], response['title']);\n// });\n\n// document.addEventListener('livewire:load', function () {\n//     window.livewire.on('toastr', response => {\n//         toastr[response['type']](response['message'], response['title']);\n//     });\n// })//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9ib290c3RyYXAuanM/NmRlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgQWxwaW5lIGZyb20gJ2FscGluZWpzJztcbi8vIHdpbmRvdy5BbHBpbmUgPSBBbHBpbmU7XG4vLyBBbHBpbmUuc3RhcnQoKTtcblxuLyoqXG4gKiBFY2hvIGV4cG9zZXMgYW4gZXhwcmVzc2l2ZSBBUEkgZm9yIHN1YnNjcmliaW5nIHRvIGNoYW5uZWxzIGFuZCBsaXN0ZW5pbmdcbiAqIGZvciBldmVudHMgdGhhdCBhcmUgYnJvYWRjYXN0IGJ5IExhcmF2ZWwuIEVjaG8gYW5kIGV2ZW50IGJyb2FkY2FzdGluZ1xuICogYWxsb3dzIHlvdXIgdGVhbSB0byBlYXNpbHkgYnVpbGQgcm9idXN0IHJlYWwtdGltZSB3ZWIgYXBwbGljYXRpb25zLlxuICovXG5cbi8vIGltcG9ydCBFY2hvIGZyb20gJ2xhcmF2ZWwtZWNobydcblxuLy8gd2luZG93LlB1c2hlciA9IHJlcXVpcmUoJ3B1c2hlci1qcycpO1xuXG4vLyB3aW5kb3cuRWNobyA9IG5ldyBFY2hvKHtcbi8vICAgICBicm9hZGNhc3RlcjogJ3B1c2hlcicsXG4vLyAgICAga2V5OiBwcm9jZXNzLmVudi5NSVhfUFVTSEVSX0FQUF9LRVksXG4vLyAgICAgY2x1c3RlcjogcHJvY2Vzcy5lbnYuTUlYX1BVU0hFUl9BUFBfQ0xVU1RFUixcbi8vICAgICBmb3JjZVRMUzogdHJ1ZVxuLy8gfSk7XG5cbi8vIHdpbmRvdy50b2FzdHIgPSByZXF1aXJlKCd0b2FzdHInKTtcblxuLy8gdG9hc3RyLm9wdGlvbnMgPSB7XG4vLyAgICAgXCJjbG9zZUJ1dHRvblwiOiB0cnVlLFxuLy8gICAgIFwiZGVidWdcIjogZmFsc2UsXG4vLyAgICAgXCJuZXdlc3RPblRvcFwiOiBmYWxzZSxcbi8vICAgICBcInByb2dyZXNzQmFyXCI6IHRydWUsXG4vLyAgICAgXCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3QtdG9wLXJpZ2h0XCIsXG4vLyAgICAgXCJwcmV2ZW50RHVwbGljYXRlc1wiOiBmYWxzZSxcbi8vICAgICBcIm9uY2xpY2tcIjogbnVsbCxcbi8vICAgICBcInNob3dEdXJhdGlvblwiOiBcIjMwMFwiLFxuLy8gICAgIFwiaGlkZUR1cmF0aW9uXCI6IFwiMTAwMFwiLFxuLy8gICAgIFwidGltZU91dFwiOiBcIjUwMDBcIixcbi8vICAgICBcImV4dGVuZGVkVGltZU91dFwiOiBcIjEwMDBcIixcbi8vICAgICBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiLFxuLy8gICAgIFwiaGlkZUVhc2luZ1wiOiBcImxpbmVhclwiLFxuLy8gICAgIFwic2hvd01ldGhvZFwiOiBcImZhZGVJblwiLFxuLy8gICAgIFwiaGlkZU1ldGhvZFwiOiBcImZhZGVPdXRcIlxuLy8gfVxuXG4vLyB3aW5kb3cubGl2ZXdpcmUub24oJ3RvYXN0cicsIHJlc3BvbnNlID0+IHtcbi8vICAgICB0b2FzdHJbcmVzcG9uc2VbJ3R5cGUnXV0ocmVzcG9uc2VbJ21lc3NhZ2UnXSwgcmVzcG9uc2VbJ3RpdGxlJ10pO1xuLy8gfSk7XG5cbi8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xpdmV3aXJlOmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgd2luZG93LmxpdmV3aXJlLm9uKCd0b2FzdHInLCByZXNwb25zZSA9PiB7XG4vLyAgICAgICAgIHRvYXN0cltyZXNwb25zZVsndHlwZSddXShyZXNwb25zZVsnbWVzc2FnZSddLCByZXNwb25zZVsndGl0bGUnXSk7XG4vLyAgICAgfSk7XG4vLyB9KSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/bootstrap.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hOTdiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./node_modules/typeit/dist/index.es.js":
/*!**********************************************!*\
  !*** ./node_modules/typeit/dist/index.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TypeIt)\n/* harmony export */ });\n// TypeIt by Alex MacArthur - https://typeitjs.com\nconst isArray = (thing) => Array.isArray(thing);\n\nconst asArray = (value) => isArray(value) ? value : [value];\n\nlet Queue = function(initialItems) {\n  let add = function(steps) {\n    asArray(steps).forEach((step) => {\n      return _q.set(Symbol(step.char?.innerText), buildQueueItem({ ...step }));\n    });\n    return this;\n  };\n  let getTypeable = () => rawValues().filter((value) => value.typeable);\n  let set = function(index, item) {\n    let keys = [..._q.keys()];\n    _q.set(keys[index], buildQueueItem(item));\n  };\n  let buildQueueItem = (queueItem) => {\n    queueItem.shouldPauseCursor = function() {\n      return Boolean(this.typeable || this.cursorable || this.deletable);\n    };\n    return queueItem;\n  };\n  let reset = function() {\n    _q.forEach((item) => delete item.done);\n  };\n  let wipe = function() {\n    _q = /* @__PURE__ */ new Map();\n    add(initialItems);\n  };\n  let getQueue = () => _q;\n  let rawValues = () => Array.from(_q.values());\n  let destroy = (key) => _q.delete(key);\n  let getItems = (all = false) => all ? rawValues() : rawValues().filter((i) => !i.done);\n  let done = (key, shouldDestroy = false) => shouldDestroy ? _q.delete(key) : _q.get(key).done = true;\n  let _q = /* @__PURE__ */ new Map();\n  add(initialItems);\n  return {\n    add,\n    set,\n    wipe,\n    done,\n    reset,\n    destroy,\n    getItems,\n    getQueue,\n    getTypeable\n  };\n};\n\nconst DATA_ATTRIBUTE = \"data-typeit-id\";\nconst CURSOR_CLASS = \"ti-cursor\";\nconst END = \"END\";\nconst DEFAULT_STATUSES = {\n  started: false,\n  completed: false,\n  frozen: false,\n  destroyed: false\n};\nconst DEFAULT_OPTIONS = {\n  breakLines: true,\n  cursor: {\n    autoPause: true,\n    autoPauseDelay: 500,\n    animation: {\n      frames: [0, 0, 1].map((n) => {\n        return { opacity: n };\n      }),\n      options: {\n        iterations: Infinity,\n        easing: \"steps(2, start)\",\n        fill: \"forwards\"\n      }\n    }\n  },\n  cursorChar: \"|\",\n  cursorSpeed: 1e3,\n  deleteSpeed: null,\n  html: true,\n  lifeLike: true,\n  loop: false,\n  loopDelay: 750,\n  nextStringDelay: 750,\n  speed: 100,\n  startDelay: 250,\n  startDelete: false,\n  strings: [],\n  waitUntilVisible: false,\n  beforeString: () => {\n  },\n  afterString: () => {\n  },\n  beforeStep: () => {\n  },\n  afterStep: () => {\n  },\n  afterComplete: () => {\n  }\n};\nconst PLACEHOLDER_CSS = `[${DATA_ATTRIBUTE}]:before {content: '.'; display: inline-block; width: 0; visibility: hidden;}`;\n\nconst createElement = (el) => document.createElement(el);\n\nconst createTextNode = (content) => document.createTextNode(content);\n\nconst appendStyleBlock = (styles, id = \"\") => {\n  let styleBlock = createElement(\"style\");\n  styleBlock.id = id;\n  styleBlock.appendChild(createTextNode(styles));\n  document.head.appendChild(styleBlock);\n};\n\nconst calculateDelay = (delayArg) => {\n  if (!isArray(delayArg)) {\n    delayArg = [delayArg / 2, delayArg / 2];\n  }\n  return delayArg;\n};\n\nconst randomInRange = (value, range) => {\n  return Math.abs(\n    Math.random() * (value + range - (value - range)) + (value - range)\n  );\n};\n\nlet range = (val) => val / 2;\nfunction calculatePace(options) {\n  let { speed, deleteSpeed, lifeLike } = options;\n  deleteSpeed = deleteSpeed !== null ? deleteSpeed : speed / 3;\n  return lifeLike ? [\n    randomInRange(speed, range(speed)),\n    randomInRange(deleteSpeed, range(deleteSpeed))\n  ] : [speed, deleteSpeed];\n}\n\nconst toArray = (val) => Array.from(val);\n\nlet expandTextNodes = (element) => {\n  [...element.childNodes].forEach((child) => {\n    if (child.nodeValue) {\n      [...child.nodeValue].forEach((c) => {\n        child.parentNode.insertBefore(createTextNode(c), child);\n      });\n      child.remove();\n      return;\n    }\n    expandTextNodes(child);\n  });\n  return element;\n};\n\nconst getParsedBody = (content) => {\n  let doc = document.implementation.createHTMLDocument();\n  doc.body.innerHTML = content;\n  return expandTextNodes(doc.body);\n};\n\nfunction walkElementNodes(element, shouldReverse = false, shouldIncludeCursor = false) {\n  let cursor = element.querySelector(`.${CURSOR_CLASS}`);\n  let walker = document.createTreeWalker(element, NodeFilter.SHOW_ALL, {\n    acceptNode: (node) => {\n      if (cursor && shouldIncludeCursor) {\n        if (node.classList?.contains(CURSOR_CLASS)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        if (cursor.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n      }\n      return node.classList?.contains(CURSOR_CLASS) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n    }\n  });\n  let nextNode;\n  let nodes = [];\n  while (nextNode = walker.nextNode()) {\n    if (!nextNode.originalParent) {\n      nextNode.originalParent = nextNode.parentNode;\n    }\n    nodes.push(nextNode);\n  }\n  return shouldReverse ? nodes.reverse() : nodes;\n}\nfunction chunkStringAsHtml(string) {\n  return walkElementNodes(getParsedBody(string));\n}\nfunction maybeChunkStringAsHtml(str, asHtml = true) {\n  return asHtml ? chunkStringAsHtml(str) : toArray(str).map(createTextNode);\n}\n\nconst isNumber = (value) => Number.isInteger(value);\n\nconst countStepsToSelector = ({\n  queueItems,\n  selector,\n  cursorPosition,\n  to\n}) => {\n  if (isNumber(selector)) {\n    return selector * -1;\n  }\n  let isMovingToEnd = new RegExp(END, \"i\").test(to);\n  let selectorIndex = selector ? [...queueItems].reverse().findIndex(({ char }) => {\n    let parentElement = char.parentElement;\n    let parentMatches = parentElement.matches(selector);\n    if (isMovingToEnd && parentMatches) {\n      return true;\n    }\n    return parentMatches && parentElement.firstChild.isSameNode(char);\n  }) : -1;\n  if (selectorIndex < 0) {\n    selectorIndex = isMovingToEnd ? 0 : queueItems.length - 1;\n  }\n  let offset = isMovingToEnd ? 0 : 1;\n  return selectorIndex - cursorPosition + offset;\n};\n\nconst destroyTimeouts = (timeouts) => {\n  timeouts.forEach(clearTimeout);\n  return [];\n};\n\nconst duplicate = (value, times) => new Array(times).fill(value);\n\nlet beforePaint = (cb) => {\n  return new Promise((resolve) => {\n    requestAnimationFrame(async () => {\n      resolve(await cb());\n    });\n  });\n};\n\nlet getAnimationFromElement = (element) => {\n  return element?.getAnimations().find((animation) => {\n    return animation.id === element.dataset.tiAnimationId;\n  });\n};\n\nlet setCursorAnimation = ({\n  cursor,\n  frames,\n  options\n}) => {\n  let animation = cursor.animate(frames, options);\n  animation.pause();\n  animation.id = cursor.dataset.tiAnimationId;\n  beforePaint(() => {\n    beforePaint(() => {\n      animation.play();\n    });\n  });\n  return animation;\n};\n\nlet rebuildCursorAnimation = ({\n  cursor,\n  options,\n  cursorOptions\n}) => {\n  if (!cursor || !cursorOptions)\n    return;\n  let animation = getAnimationFromElement(cursor);\n  let oldCurrentTime;\n  if (animation) {\n    options.delay = animation.effect.getComputedTiming().delay;\n    oldCurrentTime = animation.currentTime;\n    animation.cancel();\n  }\n  let newAnimation = setCursorAnimation({\n    cursor,\n    frames: cursorOptions.animation.frames,\n    options\n  });\n  if (oldCurrentTime) {\n    newAnimation.currentTime = oldCurrentTime;\n  }\n  return newAnimation;\n};\n\nlet execute = (queueItem) => queueItem.func?.call(null);\nlet fireItem = async ({\n  index,\n  queueItems,\n  wait,\n  cursor,\n  cursorOptions\n}) => {\n  let queueItem = queueItems[index][1];\n  let instantQueue = [];\n  let tempIndex = index;\n  let futureItem = queueItem;\n  let shouldBeGrouped = () => futureItem && !futureItem.delay;\n  let shouldPauseCursor = queueItem.shouldPauseCursor() && cursorOptions.autoPause;\n  while (shouldBeGrouped()) {\n    instantQueue.push(futureItem);\n    shouldBeGrouped() && tempIndex++;\n    futureItem = queueItems[tempIndex] ? queueItems[tempIndex][1] : null;\n  }\n  if (instantQueue.length) {\n    await beforePaint(async () => {\n      for (let q of instantQueue) {\n        await execute(q);\n      }\n    });\n    return tempIndex - 1;\n  }\n  let animation = getAnimationFromElement(cursor);\n  let options;\n  if (animation) {\n    options = {\n      ...animation.effect.getComputedTiming(),\n      delay: shouldPauseCursor ? cursorOptions.autoPauseDelay : 0\n    };\n  }\n  await wait(async () => {\n    if (animation && shouldPauseCursor) {\n      animation.cancel();\n    }\n    await beforePaint(() => {\n      execute(queueItem);\n    });\n  }, queueItem.delay);\n  await rebuildCursorAnimation({\n    cursor,\n    options,\n    cursorOptions\n  });\n  return index;\n};\n\nconst fireWhenVisible = (element, func) => {\n  let observer = new IntersectionObserver(\n    (entries, observer2) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          func();\n          observer2.unobserve(element);\n        }\n      });\n    },\n    { threshold: 1 }\n  );\n  observer.observe(element);\n};\n\nconst generateHash = () => Math.random().toString().substring(2, 9);\n\nconst isInput = (el) => {\n  return \"value\" in el;\n};\n\nlet getAllChars = (element) => {\n  if (isInput(element)) {\n    return toArray(element.value);\n  }\n  return walkElementNodes(element, true).filter(\n    (c) => !(c.childNodes.length > 0)\n  );\n};\n\nlet handleFunctionalArg = (arg) => {\n  return typeof arg === \"function\" ? arg() : arg;\n};\n\nlet select = (selector, element = document, all = false) => {\n  return element[`querySelector${all ? \"All\" : \"\"}`](selector);\n};\n\nlet isBodyElement = (node) => /body/i.test(node?.tagName);\n\nlet insertIntoElement = (originalTarget, character) => {\n  if (isInput(originalTarget)) {\n    originalTarget.value = `${originalTarget.value}${character.textContent}`;\n    return;\n  }\n  character.innerHTML = \"\";\n  let target = isBodyElement(character.originalParent) ? originalTarget : (\n    // If we add one-off fresh elements, there will be no\n    // \"originalParent\", so always fall back to the default target.\n    character.originalParent || originalTarget\n  );\n  target.insertBefore(\n    character,\n    select(\".\" + CURSOR_CLASS, target) || null\n  );\n};\n\nconst isNonVoidElement = (el) => /<(.+)>(.*?)<\\/(.+)>/.test(el.outerHTML);\n\nconst merge = (originalObj, newObj) => Object.assign({}, originalObj, newObj);\n\nlet processCursorOptions = (cursorOptions) => {\n  if (typeof cursorOptions === \"object\") {\n    let newOptions = {};\n    let { frames: defaultFrames, options: defaultOptions } = DEFAULT_OPTIONS.cursor.animation;\n    newOptions.animation = cursorOptions.animation || {};\n    newOptions.animation.frames = cursorOptions.animation?.frames || defaultFrames;\n    newOptions.animation.options = merge(\n      defaultOptions,\n      cursorOptions.animation?.options || {}\n    );\n    newOptions.autoPause = cursorOptions.autoPause ?? DEFAULT_OPTIONS.cursor.autoPause;\n    newOptions.autoPauseDelay = cursorOptions.autoPauseDelay || DEFAULT_OPTIONS.cursor.autoPauseDelay;\n    return newOptions;\n  }\n  if (cursorOptions === true) {\n    return DEFAULT_OPTIONS.cursor;\n  }\n  return cursorOptions;\n};\n\nconst removeNode = (node, rootElement) => {\n  if (!node)\n    return;\n  let nodeParent = node.parentNode;\n  let nodeToRemove = nodeParent.childNodes.length > 1 || nodeParent.isSameNode(rootElement) ? (\n    // This parent still needs to exist.\n    node\n  ) : (\n    // There's nothing else in there, so just delete the entire thing.\n    // By doing this, we clean up markup as we go along.\n    nodeParent\n  );\n  nodeToRemove.remove();\n};\n\nconst repositionCursor = (element, allChars, newCursorPosition) => {\n  let nodeToInsertBefore = allChars[newCursorPosition - 1];\n  let cursor = select(`.${CURSOR_CLASS}`, element);\n  element = nodeToInsertBefore?.parentNode || element;\n  element.insertBefore(cursor, nodeToInsertBefore || null);\n};\n\nfunction selectorToElement(thing) {\n  return typeof thing === \"string\" ? select(thing) : thing;\n}\n\nlet cursorFontStyles = {\n  \"font-family\": \"\",\n  \"font-weight\": \"\",\n  \"font-size\": \"\",\n  \"font-style\": \"\",\n  \"line-height\": \"\",\n  color: \"\",\n  transform: \"translateX(-.125em)\"\n};\nlet setCursorStyles = (id, element) => {\n  let rootSelector = `[${DATA_ATTRIBUTE}='${id}']`;\n  let cursorSelector = `${rootSelector} .${CURSOR_CLASS}`;\n  let computedStyles = getComputedStyle(element);\n  let customProperties = Object.entries(cursorFontStyles).reduce(\n    (accumulator, [item, value]) => {\n      return `${accumulator} ${item}: var(--ti-cursor-${item}, ${value || computedStyles[item]});`;\n    },\n    \"\"\n  );\n  appendStyleBlock(\n    `${cursorSelector} { display: inline-block; width: 0; ${customProperties} }`,\n    id\n  );\n};\n\nfunction splitOnBreak(str) {\n  return str.replace(/<!--(.+?)-->/g, \"\").trim().split(/<br(?:\\s*?)(?:\\/)?>/);\n}\n\nlet updateCursorPosition = (steps, cursorPosition, printedCharacters) => {\n  return Math.min(\n    Math.max(cursorPosition + steps, 0),\n    printedCharacters.length\n  );\n};\n\nlet wait = (callback, delay, timeouts) => {\n  return new Promise((resolve) => {\n    let cb = async () => {\n      await callback();\n      resolve();\n    };\n    timeouts.push(setTimeout(cb, delay || 0));\n  });\n};\n\nclass TypeIt {\n  element;\n  timeouts;\n  cursorPosition;\n  predictedCursorPosition;\n  statuses = {\n    started: false,\n    completed: false,\n    frozen: false,\n    destroyed: false\n  };\n  opts;\n  id;\n  queue;\n  cursor;\n  unfreeze = () => {\n  };\n  constructor(element, options = {}) {\n    this.opts = merge(DEFAULT_OPTIONS, options);\n    this.element = selectorToElement(element);\n    this.timeouts = [];\n    this.cursorPosition = 0;\n    this.unfreeze = () => {\n    };\n    this.predictedCursorPosition = null;\n    this.statuses = merge({}, DEFAULT_STATUSES);\n    this.id = generateHash();\n    this.queue = Queue([{ delay: this.opts.startDelay }]);\n    this.#buildOptions(options);\n    this.cursor = this.#setUpCursor();\n    this.element.dataset.typeitId = this.id;\n    appendStyleBlock(PLACEHOLDER_CSS);\n    if (this.opts.strings.length) {\n      this.#generateQueue();\n    }\n  }\n  /**\n   * Can only be called once.\n   */\n  go() {\n    if (this.statuses.started) {\n      return this;\n    }\n    this.#attachCursor();\n    if (!this.opts.waitUntilVisible) {\n      this.#fire();\n      return this;\n    }\n    fireWhenVisible(this.element, this.#fire.bind(this));\n    return this;\n  }\n  destroy(shouldRemoveCursor = true) {\n    this.timeouts = destroyTimeouts(this.timeouts);\n    handleFunctionalArg(shouldRemoveCursor) && this.cursor && this.#removeNode(this.cursor);\n    this.statuses.destroyed = true;\n  }\n  reset(rebuild) {\n    !this.is(\"destroyed\") && this.destroy();\n    if (rebuild) {\n      this.queue.wipe();\n      rebuild(this);\n    } else {\n      this.queue.reset();\n    }\n    this.cursorPosition = 0;\n    for (let property in this.statuses) {\n      this.statuses[property] = false;\n    }\n    this.element[this.#elementIsInput() ? \"value\" : \"innerHTML\"] = \"\";\n    return this;\n  }\n  is = function(key) {\n    return this.statuses[key];\n  };\n  type(string, actionOpts = {}) {\n    string = handleFunctionalArg(string);\n    let { instant } = actionOpts;\n    let bookEndQueueItems = this.#generateTemporaryOptionQueueItems(actionOpts);\n    let chars = maybeChunkStringAsHtml(string, this.opts.html);\n    let charsAsQueueItems = chars.map((char) => {\n      return {\n        func: () => this.#type(char),\n        char,\n        delay: instant || isNonVoidElement(char) ? 0 : this.#getPace(),\n        typeable: char.nodeType === Node.TEXT_NODE\n      };\n    });\n    let itemsToQueue = [\n      bookEndQueueItems[0],\n      { func: async () => await this.opts.beforeString(string, this) },\n      ...charsAsQueueItems,\n      { func: async () => await this.opts.afterString(string, this) },\n      bookEndQueueItems[1]\n    ];\n    return this.#queueAndReturn(itemsToQueue, actionOpts);\n  }\n  break(actionOpts = {}) {\n    return this.#queueAndReturn(\n      {\n        func: () => this.#type(createElement(\"BR\")),\n        typeable: true\n      },\n      actionOpts\n    );\n  }\n  move(movementArg, actionOpts = {}) {\n    movementArg = handleFunctionalArg(movementArg);\n    let bookEndQueueItems = this.#generateTemporaryOptionQueueItems(actionOpts);\n    let { instant, to } = actionOpts;\n    let numberOfSteps = countStepsToSelector({\n      queueItems: this.queue.getTypeable(),\n      selector: movementArg === null ? \"\" : movementArg,\n      to,\n      cursorPosition: this.#derivedCursorPosition\n    });\n    let directionalStep = numberOfSteps < 0 ? -1 : 1;\n    this.predictedCursorPosition = this.#derivedCursorPosition + numberOfSteps;\n    return this.#queueAndReturn(\n      [\n        bookEndQueueItems[0],\n        ...duplicate(\n          {\n            func: () => this.#move(directionalStep),\n            delay: instant ? 0 : this.#getPace(),\n            cursorable: true\n          },\n          Math.abs(numberOfSteps)\n        ),\n        bookEndQueueItems[1]\n      ],\n      actionOpts\n    );\n  }\n  exec(func, actionOpts = {}) {\n    let bookEndQueueItems = this.#generateTemporaryOptionQueueItems(actionOpts);\n    return this.#queueAndReturn(\n      [bookEndQueueItems[0], { func: () => func(this) }, bookEndQueueItems[1]],\n      actionOpts\n    );\n  }\n  options(opts, actionOpts = {}) {\n    opts = handleFunctionalArg(opts);\n    this.#updateOptions(opts);\n    return this.#queueAndReturn({}, actionOpts);\n  }\n  pause(milliseconds, actionOpts = {}) {\n    return this.#queueAndReturn(\n      { delay: handleFunctionalArg(milliseconds) },\n      actionOpts\n    );\n  }\n  delete(numCharacters = null, actionOpts = {}) {\n    numCharacters = handleFunctionalArg(numCharacters);\n    let bookEndQueueItems = this.#generateTemporaryOptionQueueItems(actionOpts);\n    let num = numCharacters;\n    let { instant, to } = actionOpts;\n    let typeableQueueItems = this.queue.getTypeable();\n    let rounds = (() => {\n      if (num === null) {\n        return typeableQueueItems.length;\n      }\n      if (isNumber(num)) {\n        return num;\n      }\n      return countStepsToSelector({\n        queueItems: typeableQueueItems,\n        selector: num,\n        cursorPosition: this.#derivedCursorPosition,\n        to\n      });\n    })();\n    return this.#queueAndReturn(\n      [\n        bookEndQueueItems[0],\n        ...duplicate(\n          {\n            func: this.#delete.bind(this),\n            delay: instant ? 0 : this.#getPace(1),\n            deletable: true\n          },\n          rounds\n        ),\n        bookEndQueueItems[1]\n      ],\n      actionOpts\n    );\n  }\n  freeze() {\n    this.statuses.frozen = true;\n  }\n  /**\n   * Like `.go()`, but more... \"off the grid.\"\n   *\n   * - won't trigger `afterComplete` callback\n   * - items won't be replayed after `.reset()`\n   *\n   * When called, all non-done items will be \"flushed\" --\n   * that is, executed, but not remembered.\n   */\n  flush(cb = () => {\n  }) {\n    this.#attachCursor();\n    this.#fire(false).then(cb);\n    return this;\n  }\n  getQueue() {\n    return this.queue;\n  }\n  getOptions() {\n    return this.opts;\n  }\n  updateOptions(options) {\n    return this.#updateOptions(options);\n  }\n  getElement() {\n    return this.element;\n  }\n  empty(actionOpts = {}) {\n    return this.#queueAndReturn({ func: this.#empty.bind(this) }, actionOpts);\n  }\n  async #empty() {\n    if (this.#elementIsInput()) {\n      this.element.value = \"\";\n      return;\n    }\n    this.#allChars.forEach(this.#removeNode.bind(this));\n    return;\n  }\n  /**\n   * Execute items in the queue.\n   *\n   * @param remember If false, each queue item will be destroyed once executed.\n   * @returns\n   */\n  async #fire(remember = true) {\n    this.statuses.started = true;\n    let cleanUp = (qKey) => {\n      this.queue.done(qKey, !remember);\n    };\n    try {\n      let queueItems = [...this.queue.getQueue()];\n      for (let index = 0; index < queueItems.length; index++) {\n        let [queueKey, queueItem] = queueItems[index];\n        if (queueItem.done)\n          continue;\n        if (!queueItem.deletable || queueItem.deletable && this.#allChars.length) {\n          let newIndex = await this.#fireItemWithContext(index, queueItems);\n          Array(newIndex - index).fill(index + 1).map((x, y) => x + y).forEach((i) => {\n            let [key] = queueItems[i];\n            cleanUp(key);\n          });\n          index = newIndex;\n        }\n        cleanUp(queueKey);\n      }\n      if (!remember) {\n        return this;\n      }\n      this.statuses.completed = true;\n      await this.opts.afterComplete(this);\n      if (!this.opts.loop) {\n        throw \"\";\n      }\n      let delay = this.opts.loopDelay;\n      this.#wait(async () => {\n        await this.#prepLoop(delay[0]);\n        this.#fire();\n      }, delay[1]);\n    } catch (e) {\n    }\n    return this;\n  }\n  async #move(step) {\n    this.cursorPosition = updateCursorPosition(\n      step,\n      this.cursorPosition,\n      this.#allChars\n    );\n    repositionCursor(this.element, this.#allChars, this.cursorPosition);\n  }\n  /**\n   * 1. Reset queue.\n   * 2. Reset initial pause.\n   */\n  async #prepLoop(delay) {\n    let derivedCursorPosition = this.#derivedCursorPosition;\n    derivedCursorPosition && await this.#move({ value: derivedCursorPosition });\n    let queueItems = this.#allChars.map((c) => {\n      return [\n        Symbol(),\n        {\n          func: this.#delete.bind(this),\n          delay: this.#getPace(1),\n          deletable: true,\n          shouldPauseCursor: () => true\n        }\n      ];\n    });\n    for (let index = 0; index < queueItems.length; index++) {\n      await this.#fireItemWithContext(index, queueItems);\n    }\n    this.queue.reset();\n    this.queue.set(0, { delay });\n  }\n  #fireItemWithContext(index, queueItems) {\n    return fireItem({\n      index,\n      queueItems,\n      wait: this.#wait.bind(this),\n      cursor: this.cursor,\n      cursorOptions: this.opts.cursor\n    });\n  }\n  async #wait(callback, delay, silent = false) {\n    if (this.statuses.frozen) {\n      await new Promise((resolve) => {\n        this.unfreeze = () => {\n          this.statuses.frozen = false;\n          resolve();\n        };\n      });\n    }\n    silent || await this.opts.beforeStep(this);\n    await wait(callback, delay, this.timeouts);\n    silent || await this.opts.afterStep(this);\n  }\n  /**\n   * Attach it to the DOM so, along with the required CSS transition.\n   */\n  async #attachCursor() {\n    !this.#elementIsInput() && this.cursor && this.element.appendChild(this.cursor);\n    if (this.#shouldRenderCursor) {\n      setCursorStyles(this.id, this.element);\n      this.cursor.dataset.tiAnimationId = this.id;\n      let { animation } = this.opts.cursor;\n      let { frames, options } = animation;\n      setCursorAnimation({\n        frames,\n        cursor: this.cursor,\n        options: {\n          duration: this.opts.cursorSpeed,\n          ...options\n        }\n      });\n    }\n  }\n  #elementIsInput() {\n    return isInput(this.element);\n  }\n  #queueAndReturn(steps, opts) {\n    this.queue.add(steps);\n    this.#maybeAppendPause(opts);\n    return this;\n  }\n  #maybeAppendPause(opts = {}) {\n    let delay = opts.delay;\n    delay && this.queue.add({ delay });\n  }\n  #generateTemporaryOptionQueueItems(newOptions = {}) {\n    return [\n      { func: () => this.#updateOptions(newOptions) },\n      { func: () => this.#updateOptions(this.opts) }\n    ];\n  }\n  async #updateOptions(opts) {\n    this.opts = merge(this.opts, opts);\n  }\n  /**\n   * Based on provided strings, generate a TypeIt queue\n   * to be fired for each character in the string.\n   */\n  #generateQueue() {\n    let strings = this.opts.strings.filter((string) => !!string);\n    strings.forEach((string, index) => {\n      this.type(string);\n      if (index + 1 === strings.length) {\n        return;\n      }\n      let splitItems = this.opts.breakLines ? [{ func: () => this.#type(createElement(\"BR\")), typeable: true }] : duplicate(\n        {\n          func: this.#delete.bind(this),\n          delay: this.#getPace(1)\n        },\n        this.queue.getTypeable().length\n      );\n      this.#addSplitPause(splitItems);\n    });\n  }\n  #buildOptions = (options) => {\n    options.cursor = processCursorOptions(\n      options.cursor ?? DEFAULT_OPTIONS.cursor\n    );\n    this.opts.strings = this.#prependHardcodedStrings(\n      asArray(this.opts.strings)\n    );\n    this.opts = merge(this.opts, {\n      html: !this.#isInput && this.opts.html,\n      nextStringDelay: calculateDelay(this.opts.nextStringDelay),\n      loopDelay: calculateDelay(this.opts.loopDelay)\n    });\n  };\n  #prependHardcodedStrings(strings) {\n    let existingMarkup = this.element.innerHTML;\n    if (!existingMarkup) {\n      return strings;\n    }\n    this.element.innerHTML = \"\";\n    if (this.opts.startDelete) {\n      this.element.innerHTML = existingMarkup;\n      expandTextNodes(this.element);\n      this.#addSplitPause(\n        duplicate(\n          {\n            func: this.#delete.bind(this),\n            delay: this.#getPace(1),\n            deletable: true\n          },\n          this.#allChars.length\n        )\n      );\n      return strings;\n    }\n    return splitOnBreak(existingMarkup).concat(strings);\n  }\n  /**\n   * Provided it's a non-form element and the options is provided,\n   * set up the cursor element for the animation.\n   */\n  #setUpCursor() {\n    if (this.#isInput) {\n      return null;\n    }\n    let cursor = createElement(\"span\");\n    cursor.className = CURSOR_CLASS;\n    if (!this.#shouldRenderCursor) {\n      cursor.style.visibility = \"hidden\";\n      return cursor;\n    }\n    cursor.innerHTML = getParsedBody(this.opts.cursorChar).innerHTML;\n    return cursor;\n  }\n  #addSplitPause(items) {\n    let delay = this.opts.nextStringDelay;\n    this.queue.add([{ delay: delay[0] }, ...items, { delay: delay[1] }]);\n  }\n  #type(char) {\n    insertIntoElement(this.element, char);\n  }\n  #delete() {\n    if (!this.#allChars.length)\n      return;\n    if (this.#isInput) {\n      this.element.value = this.element.value.slice(0, -1);\n    } else {\n      this.#removeNode(this.#allChars[this.cursorPosition]);\n    }\n  }\n  #removeNode(node) {\n    removeNode(node, this.element);\n  }\n  #getPace(index = 0) {\n    return calculatePace(this.opts)[index];\n  }\n  get #derivedCursorPosition() {\n    return this.predictedCursorPosition ?? this.cursorPosition;\n  }\n  get #isInput() {\n    return isInput(this.element);\n  }\n  get #shouldRenderCursor() {\n    return !!this.opts.cursor && !this.#isInput;\n  }\n  get #allChars() {\n    return getAllChars(this.element);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/typeit/dist/index.es.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;